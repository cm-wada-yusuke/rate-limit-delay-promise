"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const luxon_1 = require("luxon");
const index_1 = require("./index");
class DummyRemoteProcess {
    static requestMaster(master) {
        switch (master) {
            case 1:
                return Promise.resolve('one');
            case 2:
                return Promise.resolve('two');
            case 3:
                return Promise.resolve('three');
            default:
                throw new Error('Invalid master number');
        }
    }
}
exports.DummyRemoteProcess = DummyRemoteProcess;
test('import', async () => {
    const masterEnum = [1, 2, 3];
    const getMasterStringFunction = (masterNumber) => {
        // get string by async operation, such as external api.
        return DummyRemoteProcess.requestMaster(masterNumber);
    };
    const actual = await index_1.RateLimitDelayPromise.all(masterEnum, getMasterStringFunction, 1000);
    const expected = ['one', 'two', 'three'];
    expect(actual).toEqual(expected);
});
test('wait for delay', async () => {
    const masterEnum = [1, 2, 3, 2];
    const getMasterStringFunction = (masterNumber) => {
        // get string by async operation, such as external api.
        return DummyRemoteProcess.requestMaster(masterNumber);
    };
    const before = luxon_1.DateTime.utc();
    await index_1.RateLimitDelayPromise.all(masterEnum, getMasterStringFunction, 1000);
    const after = luxon_1.DateTime.utc();
    const actualTake = after.toMillis() - before.toMillis();
    expect(actualTake).toBeGreaterThan(4000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFDakMsbUNBQWdEO0FBRWhELE1BQWEsa0JBQWtCO0lBQzNCLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBYztRQUMvQixRQUFRLE1BQU0sRUFBRTtZQUNaLEtBQUssQ0FBQztnQkFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsS0FBSyxDQUFDO2dCQUNGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxLQUFLLENBQUM7Z0JBQ0YsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDO2dCQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUNoRDtJQUNMLENBQUM7Q0FDSjtBQWJELGdEQWFDO0FBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN0QixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0IsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLFlBQW9CLEVBQUUsRUFBRTtRQUNyRCx1REFBdUQ7UUFDdkQsT0FBTyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSw2QkFBcUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLHVCQUF1QixFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFGLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3JDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzlCLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLFlBQW9CLEVBQUUsRUFBRTtRQUNyRCx1REFBdUQ7UUFDdkQsT0FBTyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQUcsZ0JBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM5QixNQUFNLDZCQUFxQixDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0UsTUFBTSxLQUFLLEdBQUcsZ0JBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUU3QixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hELE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcbmltcG9ydCB7IFJhdGVMaW1pdERlbGF5UHJvbWlzZSB9IGZyb20gJy4vaW5kZXgnO1xuXG5leHBvcnQgY2xhc3MgRHVtbXlSZW1vdGVQcm9jZXNzIHtcbiAgICBzdGF0aWMgcmVxdWVzdE1hc3RlcihtYXN0ZXI6IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHN3aXRjaCAobWFzdGVyKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnb25lJyk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgndHdvJyk7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgndGhyZWUnKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hc3RlciBudW1iZXInKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudGVzdCgnaW1wb3J0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1hc3RlckVudW0gPSBbMSwgMiwgM107XG4gICAgY29uc3QgZ2V0TWFzdGVyU3RyaW5nRnVuY3Rpb24gPSAobWFzdGVyTnVtYmVyOiBudW1iZXIpID0+IHtcbiAgICAgICAgLy8gZ2V0IHN0cmluZyBieSBhc3luYyBvcGVyYXRpb24sIHN1Y2ggYXMgZXh0ZXJuYWwgYXBpLlxuICAgICAgICByZXR1cm4gRHVtbXlSZW1vdGVQcm9jZXNzLnJlcXVlc3RNYXN0ZXIobWFzdGVyTnVtYmVyKVxuICAgIH07XG5cbiAgICBjb25zdCBhY3R1YWwgPSBhd2FpdCBSYXRlTGltaXREZWxheVByb21pc2UuYWxsKG1hc3RlckVudW0sIGdldE1hc3RlclN0cmluZ0Z1bmN0aW9uLCAxMDAwKTtcbiAgICBjb25zdCBleHBlY3RlZCA9IFsnb25lJywgJ3R3bycsICd0aHJlZSddO1xuICAgIGV4cGVjdChhY3R1YWwpLnRvRXF1YWwoZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dhaXQgZm9yIGRlbGF5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1hc3RlckVudW0gPSBbMSwgMiwgMywgMl07XG4gICAgY29uc3QgZ2V0TWFzdGVyU3RyaW5nRnVuY3Rpb24gPSAobWFzdGVyTnVtYmVyOiBudW1iZXIpID0+IHtcbiAgICAgICAgLy8gZ2V0IHN0cmluZyBieSBhc3luYyBvcGVyYXRpb24sIHN1Y2ggYXMgZXh0ZXJuYWwgYXBpLlxuICAgICAgICByZXR1cm4gRHVtbXlSZW1vdGVQcm9jZXNzLnJlcXVlc3RNYXN0ZXIobWFzdGVyTnVtYmVyKVxuICAgIH07XG5cbiAgICBjb25zdCBiZWZvcmUgPSBEYXRlVGltZS51dGMoKTtcbiAgICBhd2FpdCBSYXRlTGltaXREZWxheVByb21pc2UuYWxsKG1hc3RlckVudW0sIGdldE1hc3RlclN0cmluZ0Z1bmN0aW9uLCAxMDAwKTtcbiAgICBjb25zdCBhZnRlciA9IERhdGVUaW1lLnV0YygpO1xuXG4gICAgY29uc3QgYWN0dWFsVGFrZSA9IGFmdGVyLnRvTWlsbGlzKCkgLSBiZWZvcmUudG9NaWxsaXMoKTtcbiAgICBleHBlY3QoYWN0dWFsVGFrZSkudG9CZUdyZWF0ZXJUaGFuKDQwMDApO1xufSk7XG4iXX0=